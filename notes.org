# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2024-11-09 19:47:52 krylon>
#
#+TAGS: internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(b) design(d), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TAGS: web(w) concurrency(c) backend(a)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Cache Me, Amadeus [2/2]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
  A somewhat simple-minded caching framework that aims to work well /
  painlessly with concurrent readers and writers.
** clocktable
   #+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
   #+CAPTION: Clock summary at [2024-11-09 Sa 19:47]
   | Headline                  | Time   |        |      |      |      |
   |---------------------------+--------+--------+------+------+------|
   | *Total time*              | *6:36* |        |      |      |      |
   |---------------------------+--------+--------+------+------+------|
   | *Cache Me, Amadeus [2/2]* | *6:36* |        |      |      |      |
   | \_  /Components [2/2]/    |        | /6:36/ |      |      |      |
   | \_    Testing [0/0]       |        |        | 3:37 |      |      |
   | \_    Interface [0/0]     |        |        | 0:55 |      |      |
   | \_    Backends [1/1]      |        |        | 2:04 |      |      |
   | \_      KV-Store [1/1]    |        |        |      | 2:04 |      |
   | \_        Synchronization |        |        |      |      | 0:03 |
   #+END:
** Journal [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Features [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
** Components [2/2]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
*** DONE Testing [0/0]
    CLOSED: [2024-11-09 Sa 19:40]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-11-07 Do 17:37]--[2024-11-07 Do 19:47] =>  2:10
    CLOCK: [2024-11-06 Mi 22:18]--[2024-11-06 Mi 23:45] =>  1:27
    :END:
    - [X] Test concurrent access
    - [ ] Test purging
*** Interface [0/0]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2024-11-06 Mi 16:47]--[2024-11-06 Mi 17:42] =>  0:55
    :END:
    I want to keep the interface as painless as possible. Basically, I only
    need the following operations:
    - Lookup a key
    - Write / replace a key
    - Delete a key
    - Purge all stale entries
    - Flush the entire cache
    *Initially, all operations will be blocking* if there multiple actors, I
    may add options for non-blocking access later on. (Meaning that I do
    intend to do that, but I might not get around to it for some time.)
*** Backends [1/1]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    I don't want to get overly fancy, but I want to support multiple
    backends. At the very least an in-memory cache and a persistent cache that
    uses e.g. SQLite or LevelDB. Later on, we might get more fancy and support
    memcached, Redis/Valkey, or Postgres. But that's for later.
**** Memory [0/0]
     :PROPERTIES:
     :COOKIE_DATA: todo recursive
     :VISIBILITY: children
     :END:
     This should be relatively simple, I can use sync.Map or a simple map and
     some locking.
**** KV-Store [1/1]
     :PROPERTIES:
     :COOKIE_DATA: todo recursive
     :VISIBILITY: children
     :END:
     :LOGBOOK:
     CLOCK: [2024-11-06 Mi 17:52]--[2024-11-06 Mi 19:53] =>  2:01
     :END:
     I am thinking of LevelDB, maybe Bolt or something like that. There used
     to be a few file-based embedded key-value stores for Go, I might have to
     check out the playing field. But LevelDB appears to be a sensible
     starting point. /Maybe/ SQLite. It appears to be overkill, but it
     wouldn't be terribly hard to pull off.
***** DONE Synchronization
      CLOSED: [2024-11-09 Sa 19:47]
      :LOGBOOK:
      CLOCK: [2024-11-09 Sa 19:44]--[2024-11-09 Sa 19:47] =>  0:03
      :END:
      When I use the LevelDB backend from the application I am working on, I
      get very frequent messages saying "resource temporarily unavailable" on
      stderr, that appear to originate within the LevelDB code. I don't like
      that, on purely aesthetical reasons, so I will try to put some manual
      locking in front of that, see how that works out.
** Bugs [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
